@using Microsoft.AspNetCore.Components.Sections
@inherits LayoutComponentBase
@inject StorageService StorageService
@inject Cod2State Cod2State
@implements IDisposable

<main>
    <MudLayout>
        <Appbar @bind-DrawerOpen="_drawerOpen" />
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2" OverlayAutoClose="true" Variant="@DrawerVariant.Temporary">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" Class="mt-1">Mandags Spil</MudText>
            </MudDrawerHeader>
            <MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Tertiary" Class="pa-2">
                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="/weapon-select" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Home">
                    Weapon Select</MudNavLink>
                <MudNavLink Href="@weaponWheelPath" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Circle">
                    Weapon Wheel</MudNavLink>
                @if (Cod2State.isDeveloperMode)
                {
                    <MudNavLink Href="@classModePath" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People">
                        Class Mode</MudNavLink>
                }
                <MudNavLink Href="/Dirt3" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Home">Dirt 3
                </MudNavLink>
                <MudNavLink Href="/Settings" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings">Settings
                </MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</main>

@code {
    bool _drawerOpen = false;

    private static string weaponWheelPath = "/nation-select/" + GameModeConstants.Lottery;
    private static string classModePath = "/nation-select/" + GameModeConstants.Lobby;

    protected override async Task OnInitializedAsync()
    {
        Cod2State.OnStateChanged += StateHasChanged;

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Cod2State.OnStateChanged -= StateHasChanged;
    }
}