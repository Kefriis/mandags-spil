@page "/reset-password"
@using System.Runtime.ConstrainedExecution
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IAccountManagement Acct

<PageTitle>Reset Password</PageTitle>
<HeaderTitle Title="Reset Password" />

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-4">
    @if (!CanReset)
    {
        <MudAlert Severity="Severity.Warning">Can not reset password at this time.</MudAlert>
    }
    else
    {
        @if (passwordResetSuccess)
        {
            if (errors)
            {
                foreach (var error in errorList)
                {
                    <div class="alert alert-danger">@error</div>
                }
            }
            else
            {
                <div>
                    Your password was reset. You may <a href="login">login</a>
                    to the app with your new password.
                </div>
            }
        }
        else
        {
            <div>
                A password reset code has been sent to your email address.
                Obtain the code from the email for this form.
            </div>
            <EditForm Model="Reset" FormName="reset-password" OnValidSubmit="OnValidSubmitStep2Async" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Reset.NewPassword" id="Reset.NewPassword" class="form-control"
                        autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="Reset.NewPassword" class="form-label">
                        New Password
                    </label>
                    <ValidationMessage For="() => Reset.NewPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Reset.ConfirmPassword" id="Reset.ConfirmPassword"
                        class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="Reset.ConfirmPassword" class="form-label">
                        Confirm Password
                    </label>
                    <ValidationMessage For="() => Reset.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">
                    Reset password
                </button>
            </EditForm>
        }
    }
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    private bool CanReset = false;
    private bool passwordResetSuccess, errors;
    private string[] errorList = [];

    protected override void OnInitialized()
    {
        Console.WriteLine($"Code: {Code}");
        Console.WriteLine($"Email: {Email}");

        if (string.IsNullOrEmpty(Code))
        {
            Snackbar.Add("Missing reset Token. Cannot reset password", Severity.Warning);
            return;
        }

        if (string.IsNullOrEmpty(Email))
        {
            Snackbar.Add("Missing email. Cannot reset password", Severity.Warning);
            return;
        }

        CanReset = true;
    }

    [SupplyParameterFromForm(FormName = "reset-password")]
    private ResetModel Reset { get; set; } = new();

    private async Task OnValidSubmitStep2Async()
    {
        var result = await Acct.ResetPasswordAsync(Email, Code,
        Reset.NewPassword);

        if (result.Succeeded)
        {
            passwordResetSuccess = true;

        }
        else
        {
            errors = true;
            errorList = result.ErrorList;
        }
    }
    private sealed class ResetModel
    {
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at " +
        "max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string NewPassword { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation " +
        "password don't match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}