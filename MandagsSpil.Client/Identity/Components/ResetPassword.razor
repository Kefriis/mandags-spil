@page "/reset-password"
@using System.Runtime.ConstrainedExecution
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IAccountManagement Acct

<PageTitle>Reset Password</PageTitle>
<HeaderTitle Title="Reset Password" />

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-4">
    @if (!CanReset)
    {
        <MudAlert Severity="Severity.Warning">Can not reset password at this time.</MudAlert>
    }
    else
    {
        @if (passwordResetSuccess)
        {

            <MudText Typo="Typo.subtitle1">Your password was reset. You may <MudLink href="login">Login</MudLink>
                to the app with your new password.</MudText>
        }
        else
        {
            <EditForm Model="Reset" FormName="reset-password" OnValidSubmit="OnValidSubmitStep2Async" method="post">
                <DataAnnotationsValidator />
                <MudPaper Class="pa-6" Elevation="1">
                  <MudCardContent>
                    <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="Email" For="@(() => Email)"
                        InputType="InputType.Email" Disabled="true" />

                    <MudTextField Label="Password" Variant="Variant.Outlined" @bind-Value="Reset.NewPassword"
                        For="@(() => Reset.NewPassword)" InputType="InputType.Password" />

                    <MudTextField Label="Confirm Password" Variant="Variant.Outlined" @bind-Value="Reset.ConfirmPassword"
                        For="@(() => Reset.ConfirmPassword)" InputType="InputType.Password" />
                          </MudCardContent>
<MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        Reset
                        password</MudButton>
                        </MudCardActions>
                </MudPaper>
            </EditForm>

            if (errors)
            {
                foreach (string error in errorList)
                {
                    <MudAlert Severity="Severity.Warning">@error</MudAlert>
                }
            }
        }
    }
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    private bool CanReset = false;
    private bool passwordResetSuccess, errors;
    private string[] errorList = [];

    protected override void OnInitialized()
    {
        Console.WriteLine($"Code: {Code}");
        Console.WriteLine($"Email: {Email}");

        if (string.IsNullOrEmpty(Code))
        {
            Snackbar.Add("Missing reset Token. Cannot reset password", Severity.Warning);
            return;
        }

        if (string.IsNullOrEmpty(Email))
        {
            Snackbar.Add("Missing email. Cannot reset password", Severity.Warning);
            return;
        }

        CanReset = true;
    }

    [SupplyParameterFromForm(FormName = "reset-password")]
    private ResetModel Reset { get; set; } = new();

    private async Task OnValidSubmitStep2Async()
    {
        var result = await Acct.ResetPasswordAsync(Email!, Code!,
        Reset.NewPassword);

        Console.WriteLine(JsonSerializer.Serialize(result));

        if (result.Succeeded)
        {
            passwordResetSuccess = true;

        }
        else
        {
            errors = true;
            errorList = result.Errors.Select(x => x.Description).ToArray();
        }
    }
    private sealed class ResetModel
    {
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at " +
        "max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string NewPassword { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation " +
        "password don't match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}