@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject IAccountManagement Acct

<PageTitle>Register</PageTitle>
<HeaderTitle Title="Register" />

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-4">
    <AuthorizeView>
        <Authorized>
            <MudAlert Severity="Severity.Success" Elevation="0">
                You're already logged in as @context.User.Identity?.Name.
            </MudAlert>
        </Authorized>
        <NotAuthorized>
            @if (formResult.Succeeded)
            {
                <MudAlert Severity="Severity.Success" Elevation="0">
                    You successfully registered. Now you can <MudLink Href="login">login</MudLink>.
                </MudAlert>
            }
            else
            {
                @foreach (var error in formResult.ErrorList)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0">@error</MudAlert>
                }
                <MudPaper Class="pa-6" Elevation="1">
               <EditForm Model="@model" OnValidSubmit="RegisterUserAsync" Context="editContext">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>
                </MudPaper>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;
    private FormResult formResult = new();

    [SupplyParameterFromForm]
    private InputModel model { get; set; } = new();

    public async Task RegisterUserAsync()
    {
        Console.WriteLine($"Registering {model.Email}");
        formResult = await Acct.RegisterAsync(model.Email, model.Password);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Compare("Password")]
        [Display(Name = "Confirm Password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

      private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if(pwField1 == null)
            return "Internal error: pwField1 is null";
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return string.Empty;
    }
}