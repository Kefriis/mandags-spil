@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IAccountManagement Acct
@inject NavigationManager Navigation
@inject IUserService UserService

<PageTitle>Login</PageTitle>
<HeaderTitle Title="Login" />

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-4">

    <AuthorizeView>
        <Authorized>
            <MudAlert Severity="Severity.Success" Elevation="0">You're logged in as @context.User.Identity?.Name.
            </MudAlert>
        </Authorized>
        <NotAuthorized>
            @foreach (var error in formResult.ErrorList)
            {
                <MudAlert Severity="Severity.Error" Elevation="0">@error</MudAlert>
            }
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" Context="editform_context">
                <DataAnnotationsValidator />
                <MudPaper Class="pa-6" Elevation="1">
                    <MudCardContent>
                        <MudTextField Label="Email" Class="mt-3" @bind-Value="Input.Email" For="@(() => Input.Email)"
                            Variant="Variant.Outlined" />
                        <MudTextField Label="Password" Class="mt-3" @bind-Value="Input.Password"
                            For="@(() => Input.Password)" InputType="InputType.Password" Variant="Variant.Outlined" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                            Class="ml-auto">Log in</MudButton>
                    </MudCardActions>

                    <MudText>
                        <MudLink Href="register">Register as a new user</MudLink>
                    </MudText>
                    <MudText>
                        <MudLink Href="forgot-password">Forgot password?</MudLink>
                    </MudText>
                </MudPaper>
            </EditForm>
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>


@code {
    private FormResult formResult = new();

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        formResult = await Acct.LoginAsync(Input.Email, Input.Password);

        if (formResult.Succeeded)
        {
            var userInfo = await UserService.GetUserAsync();

            if(userInfo is null){
                Navigation.NavigateTo("/profile?Create=true");
                return;
            }

            if (!string.IsNullOrEmpty(ReturnUrl))
            {
                Navigation.NavigateTo(ReturnUrl);

                return;
            }

            Navigation.NavigateTo("/");

        }


    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}