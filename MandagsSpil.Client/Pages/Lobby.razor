@page "/lobby/{Nation}"
@using MandagsSpil.Client.Identity
@using MandagsSpil.Client.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net

@inject NavigationManager Navigation
@inject Cod2State Cod2State
@inject StorageService StorageService
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<HeaderTitle Title="@($"Lobby: {Nation}")" />
<PageTitle>Lobby</PageTitle>
<ShowBackButton />

<OverlayWithText Text="Connecting..." Visible="_loading" />

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudGrid>
        <MudItem xs="12" sm="8">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-3">Lobby - Nation: @Nation</MudText>

                <MudList Dense="true" T="PlayerInfo">
                    @foreach (var p in Players)
                    {
                        <MudListItem Selected="@IsCurrentUser(p.Id)">
                            <div class="d-flex justify-space-between">
                                <div>@p.UserName</div>
                                <div>@(p.SelectedClass == ClassNameEnum.Unknown ? "(No class selected)" :
                                                                    p.SelectedClass.ToString())</div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-2">Select Class</MudText>

                @if (Classes.Count == 0)
                {
                    <MudText>Loading classes...</MudText>
                }
                else
                {
                    foreach (ClassInfo c in Classes)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="ma-1"
                            OnClick="@(() => OnClassSelected(c.Name))" Disabled="@(SelectedClass == c.Name)">
                            @c.Name
                        </MudButton>
                    }

                    @if (CurrentClass != null)
                    {
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">Weapons</MudText>
                        <MudList Dense="true" T="string">
                            @foreach (var w in CurrentClass.Weapons)
                            {
                                <MudListItem>@w</MudListItem>
                            }
                        </MudList>
                    }
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string? UserName { get; set; }
    [Parameter] public string? Nation { get; set; }

    private bool _loading = false;

    private HubConnection? hubConnection;

    private List<PlayerInfo> Players = new();
    private List<ClassInfo> Classes = new();

    private ClassNameEnum SelectedClass;
    private ClassInfo? CurrentClass => Classes.FirstOrDefault(c => c.Name == SelectedClass);

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        UserName = await StorageService.GetUserNameAsync();

        var backendUrl = Configuration["backendUrl"];

        // The HttpMessageHandlerFactory is already set correctly.
        hubConnection = new HubConnectionBuilder()
        .WithUrl($"{backendUrl}/lobbyhub", o =>
        {
            o.HttpMessageHandlerFactory = message =>
    {
            return new CredentialsDelegatingHandler();
        };
        })
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<LobbyStateDto>("LobbyUpdated", OnLobbyUpdated);

        try
        {
            await hubConnection.StartAsync();

            // Only attempt to invoke hub methods if the connection is active.
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.InvokeAsync("JoinLobby", UserName, Nation, Cod2State.Id);

                // Initial fetch of lobby state
                LobbyStateDto? lobby = await hubConnection.InvokeAsync<LobbyStateDto>("GetLobbyState", Nation);
                OnLobbyUpdated(lobby);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Could not connect to server. Please try again later.", Severity.Error);
        }
        finally
        {
            _loading = false;
        }

        // Only navigate away if the connection failed to start.
        if (hubConnection.State != HubConnectionState.Connected)
        {
            Navigation.NavigateTo("/nation-select/" + GameModeConstants.Lobby);
        }
    }

    private void OnLobbyUpdated(LobbyStateDto lobby)
    {
        if (lobby.Nation.ToString().Equals(Nation, StringComparison.OrdinalIgnoreCase))
        {
            Players = lobby.Players.ToList();
            Classes = lobby.Classes.ToList();

            var me = Players.FirstOrDefault(p => p.Id == Cod2State.Id);
            if (me == null)
            {
                // User got kicked or lobby reset, navigate back to nation select
                Navigation.NavigateTo("/nation-select/" + GameModeConstants.Lobby);
                return;
            }

            if (me.SelectedClass != SelectedClass)
            {
                SelectedClass = me.SelectedClass;
            }

            InvokeAsync(StateHasChanged);
        }
    }
    private IDisposable? registration;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
            Navigation.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    private async Task OnClassSelected(ClassNameEnum newClass)
    {
        if (hubConnection is not null)
        {
            var result = await hubConnection.InvokeAsync<ResponseType>("SelectClass", UserName, Nation, newClass.ToString(),
            Cod2State.Id);

            if (!result.Success)
            {
                Snackbar.Add(result.Message ?? "Could not select class", Severity.Error);
                return;
            }
        }
        SelectedClass = newClass;
    }

    private bool IsCurrentUser(Guid id) => id == Cod2State.Id;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("LeaveLobby", UserName, Nation, Cod2State.Id);
            await hubConnection.DisposeAsync();
        }

        registration?.Dispose();
    }

    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("LeaveLobby", UserName, Nation, Cod2State.Id);
        }
    }
}