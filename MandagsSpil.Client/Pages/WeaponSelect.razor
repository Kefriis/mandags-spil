@page "/weapon-select"

<HeaderTitle Title="Weapon Select" />
<ShowBackButton />

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-4">
    <MudText Typo="Typo.h4">Weapon select here</MudText>
    <MudText Typo="Typo.body1">
        This page is a placeholder for the Weapon select for cod2.
        It will be implemented in the future.
    </MudText>
    <MudText Typo="Typo.body1">
        <button class="btn btn-primary" @onclick="chooseAmerican">American</button>
        <button class="btn btn-primary" @onclick="chooseGerman">German</button>
        <button class="btn btn-primary" @onclick="chooseBritish">British</button>
        <button class="btn btn-primary" @onclick="chooseRussian">Russian</button>
    </MudText>
    <MudText Typo="Typo.body2">
        <button class="btn btn-primary" @onclick="chooseWeapon">Spawn</button>
    </MudText>
    <MudText Typo="Typo.h4">
        <p role="status">
            Current weapon: @(currentWeapon is not null ? $"{currentWeapon.Number}. {currentWeapon.Name} ({currentWeapon.Nation})" : "Spawn")
        </p>
    </MudText>
</MudContainer>

@code {
    // Weapon class representing a weapon with number, name, and nation
    public class Weapon
    {
        public int Number { get; set; }
        public string Name { get; set; }
        public string Nation { get; set; }
    }

    // Weapon lists for each nation
    List<Weapon> americanWeapons = new List<Weapon>
    {
        new Weapon { Number = 1, Name = "Grease Gun", Nation = "American" },
        new Weapon { Number = 2, Name = "M1A1", Nation = "American" },
        new Weapon { Number = 3, Name = "M1 Garand", Nation = "American" },
        new Weapon { Number = 4, Name = "Springfield", Nation = "American" },
        new Weapon { Number = 5, Name = "Trench Gun", Nation = "American" },
        new Weapon { Number = 6, Name = "Thompson", Nation = "American" },
        new Weapon { Number = 7, Name = "BAR", Nation = "American" }
    };
    List<Weapon> germanWeapons = new List<Weapon>
    {
        new Weapon { Number = 1, Name = "MP40", Nation = "German" },
        new Weapon { Number = 2, Name = "Kar98k", Nation = "German" },
        new Weapon { Number = 3, Name = "Gewehr 43", Nation = "German" },
        new Weapon { Number = 4, Name = "FG42", Nation = "German" },
        new Weapon { Number = 5, Name = "Scoped Kar98k", Nation = "German" },
        new Weapon { Number = 6, Name = "Shotgun", Nation = "German" }
        // Add more as needed
    };
    List<Weapon> britishWeapons = new List<Weapon>
    {
        new Weapon { Number = 1, Name = "Sten", Nation = "British" },
        new Weapon { Number = 2, Name = "Lee-Enfield", Nation = "British" },
        new Weapon { Number = 3, Name = "Bren", Nation = "British" },
        new Weapon { Number = 4, Name = "Scoped Lee-Enfield", Nation = "British" },
        new Weapon { Number = 5, Name = "Shotgun", Nation = "British" }
        // Add more as needed
    };
    List<Weapon> russianWeapons = new List<Weapon>
    {
        new Weapon { Number = 1, Name = "PPSH-41", Nation = "Russian" },
        new Weapon { Number = 2, Name = "Mosin-Nagant", Nation = "Russian" },
        new Weapon { Number = 3, Name = "SVT-40", Nation = "Russian" },
        new Weapon { Number = 4, Name = "Scoped Mosin-Nagant", Nation = "Russian" },
        new Weapon { Number = 5, Name = "Shotgun", Nation = "Russian" }
        // Add more as needed
    };

    List<Weapon> availableWeapons = new();  // Weapons to select from
    List<Weapon> usedWeapons = new();       // Used weapons

    Random rng = new Random();

    Weapon? currentWeapon = null;

    // Nation selection
    private void chooseAmerican() => ResetWeapons(americanWeapons);
    private void chooseGerman() => ResetWeapons(germanWeapons);
    private void chooseBritish() => ResetWeapons(britishWeapons);
    private void chooseRussian() => ResetWeapons(russianWeapons);

    private void ResetWeapons(List<Weapon> nationWeapons)
    {
        availableWeapons = new List<Weapon>(nationWeapons);
        usedWeapons.Clear();
        currentWeapon = null;
    }

    private void spawner()
    {
        if (availableWeapons.Count == 0) return;
        int weaponIndex = rng.Next(availableWeapons.Count);
        currentWeapon = availableWeapons[weaponIndex];
        usedWeapons.Add(currentWeapon);
        availableWeapons.RemoveAt(weaponIndex);
    }

    private void reload()
    {
        availableWeapons.AddRange(usedWeapons);
        usedWeapons.Clear();
    }

    private void chooseWeapon()
    {
        if (availableWeapons.Count > 0)
        {
            spawner();
        }
        else
        {
            reload();
            spawner();
        }
    }
}